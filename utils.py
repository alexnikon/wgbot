import uuid
import datetime
import logging
from typing import Optional

logger = logging.getLogger(__name__)

def generate_peer_name(telegram_username: Optional[str] = None, user_id: Optional[int] = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username_telegramID
    
    Args:
        telegram_username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username_telegramID
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç username_telegramID –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if telegram_username:
        peer_name = f"{telegram_username}_{user_id}"
    else:
        # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ user_id
        peer_name = f"user_{user_id}"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    if len(peer_name) > 50:
        peer_name = peer_name[:50]
    
    return peer_name

def generate_uuid() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –¥–ª—è job"""
    return str(uuid.uuid4())

def format_datetime(dt: datetime.datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è WGDashboard API
    
    Args:
        dt: –û–±—ä–µ–∫—Ç datetime
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
    """
    return dt.strftime("%Y-%m-%d %H:%M:%S")

def parse_datetime(date_str: str) -> datetime.datetime:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏–∑ WGDashboard API
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
        
    Returns:
        –û–±—ä–µ–∫—Ç datetime
    """
    return datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")

def calculate_expiry_date(days: int = 30) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    
    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
    """
    expiry_date = datetime.datetime.now() + datetime.timedelta(days=days)
    return format_datetime(expiry_date)

def is_expired(expire_date_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        expire_date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
    """
    try:
        expire_date = parse_datetime(expire_date_str)
        return datetime.datetime.now() > expire_date
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {expire_date_str}")
        return False

def format_peer_info(peer_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        peer_data: –î–∞–Ω–Ω—ã–µ –æ –ø–∏—Ä–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not peer_data:
        return "–ü–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    created_at = peer_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    expire_date = peer_data.get('expire_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        if created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            created_dt = parse_datetime(created_at)
            created_at = created_dt.strftime("%d.%m.%Y %H:%M")
    except:
        pass
    
    try:
        if expire_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            expire_dt = parse_datetime(expire_date)
            expire_date = expire_dt.strftime("%d.%m.%Y %H:%M")
    except:
        pass
    
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if not is_expired(peer_data.get('expire_date', '')) else "üî¥ –ò—Å—Ç–µ–∫"
    
    return f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ä–µ**

üë§ **–ò–º—è:** `{peer_data.get('peer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`
üÜî **ID:** `{peer_data.get('peer_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:20]}...`
üìÖ **–°–æ–∑–¥–∞–Ω:** {created_at}
‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expire_date}
üìä **–°—Ç–∞—Ç—É—Å:** {status}
    """

def format_peer_list(peers: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        peers: –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not peers:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤"
    
    result = "üìã **–í–∞—à–∏ –ø–∏—Ä—ã:**\n\n"
    
    for i, peer in enumerate(peers, 1):
        status = "üü¢" if not is_expired(peer.get('expire_date', '')) else "üî¥"
        expire_date = peer.get('expire_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        try:
            if expire_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                expire_dt = parse_datetime(expire_date)
                expire_date = expire_dt.strftime("%d.%m.%Y")
        except:
            pass
        
        result += f"{i}. {status} `{peer.get('peer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}` - –¥–æ {expire_date}\n"
    
    return result

def validate_peer_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–∏—Ä–∞
    
    Args:
        name: –ò–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ
    """
    if not name or len(name) < 3:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    allowed_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-')
    return all(c in allowed_chars for c in name)

def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    import re
    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    filename = filename.strip()
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 100:
        filename = filename[:100]
    
    return filename
