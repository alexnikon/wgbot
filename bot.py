import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError

from config import TELEGRAM_BOT_TOKEN
from wg_api import WGDashboardAPI
from database import Database
from payment import PaymentManager
from utils import (
    generate_peer_name, format_peer_info, format_peer_list, 
    validate_peer_name, sanitize_filename
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/wgbot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
wg_api = WGDashboardAPI()
db = Database()
payment_manager = PaymentManager(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PeerStates(StatesGroup):
    waiting_for_peer_name = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
def create_main_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    existing_peer = db.get_peer_by_telegram_id(user_id)
    has_paid_access = existing_peer and existing_peer.get('payment_status') == 'paid'
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø" if not has_paid_access else "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω",
                    callback_data="pay" if not has_paid_access else "already_paid"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÅ –ü–æ–ª—É—á–∏—Ç—å\n–∫–æ–Ω—Ñ–∏–≥",
                    callback_data="get_config"
                ),
                InlineKeyboardButton(
                    text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å\n–¥–æ—Å—Ç—É–ø",
                    callback_data="extend"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞",
                    callback_data="status"
                )
            ]
        ]
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def create_guide_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="main"
                )
            ]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == '/start')
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    payment_info = payment_manager.get_payment_info()
    tariffs = payment_info['tariffs']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
    tariff_text = ""
    for tariff_key, tariff_data in tariffs.items():
        tariff_text += f"‚≠ê {tariff_data['name']} - {tariff_data['stars_price']} Stars\n"
        tariff_text += f"üí≥ {tariff_data['name']} - {tariff_data['rub_price']} —Ä—É–±.\n\n"
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º vpn, —Å–∫–∞—á–∞–π –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ >> https://nikonvpn.xyz

üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:
{tariff_text}–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
    """
    
    await message.answer(welcome_text, reply_markup=create_main_menu_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "pay")
async def handle_pay_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    await callback_query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (—ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º)
    await payment_manager.send_payment_selection(callback_query.message.chat.id, user_id)

@dp.callback_query(F.data == "already_paid")
async def handle_already_paid_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ—Å—Ç—É–ø –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω'"""
    await callback_query.answer("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–µ
    user_id = callback_query.from_user.id
    payment_info = payment_manager.get_payment_info()
    
    already_paid_text = """
‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN –¥–æ—Å—Ç—É–ø!

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:
    """
    
    await callback_query.message.edit_text(
        already_paid_text,
        reply_markup=create_main_menu_keyboard(user_id)
    )

@dp.callback_query(F.data == "get_config")
async def handle_get_config_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if existing_peer:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        if existing_peer.get('payment_status') != 'paid':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø
            error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
            """
            await callback_query.message.edit_text(
                error_text,
                reply_markup=create_main_menu_keyboard(user_id)
            )
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∏—Ä–∞
            peer_config = wg_api.download_peer_config(existing_peer['peer_id'])
            if peer_config:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ —Ñ–∞–π–ª (—ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                config_filename = "nikonVPN.conf"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∞–π—Ç—ã
                if isinstance(peer_config, str):
                    config_bytes = peer_config.encode('utf-8')
                else:
                    config_bytes = peer_config
                
                await callback_query.message.reply_document(
                    document=types.BufferedInputFile(
                        config_bytes,
                        filename=config_filename
                    ),
                    caption="–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaWG"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                user_id = callback_query.from_user.id
                
                success_text = """
‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
                """
                
                await callback_query.message.edit_text(
                    success_text,
                    reply_markup=create_main_menu_keyboard(user_id)
                )
            else:
                error_text = """
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
                """
                await callback_query.message.edit_text(
                    error_text,
                    reply_markup=create_main_menu_keyboard(user_id)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            error_text = """
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
            """
            await callback_query.message.edit_text(
                error_text,
                reply_markup=create_main_menu_keyboard(user_id)
            )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–∏—Ä–∞
        error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç VPN –¥–æ—Å—Ç—É–ø–∞.

üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )

@dp.callback_query(F.data == "extend")
async def handle_extend_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø'"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if not existing_peer:
        error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –¥–æ—Å—Ç—É–ø–∞.

üíé –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    if existing_peer.get('payment_status') != 'paid':
        error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

üíé –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (—ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º)
    await payment_manager.send_payment_selection(callback_query.message.chat.id, user_id)

@dp.callback_query(F.data == "status")
async def handle_status_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞'"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if not existing_peer:
        error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –¥–æ—Å—Ç—É–ø–∞.

üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç—å.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    if existing_peer.get('payment_status') != 'paid':
        error_text = """
‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç—å.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã
        peer_info = {
            'name': existing_peer['peer_name'],
            'id': existing_peer['peer_id'],
            'expire_date': existing_peer.get('expire_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'created_at': existing_peer.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'payment_status': existing_peer.get('payment_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:

üìÖ –î–æ—Å—Ç—É–ø –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω: {peer_info['created_at']}
‚è∞ –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {peer_info['expire_date']}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        
        await callback_query.message.edit_text(
            status_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ä–µ: {e}")
        error_text = """
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ä–µ.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        """
        await callback_query.message.edit_text(
            error_text,
            reply_markup=create_main_menu_keyboard(user_id)
        )

@dp.callback_query(F.data == "guide")
async def handle_guide_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'"""
    await callback_query.answer()
    
    guide_text = """
üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN:

1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç WireGuard:
   ‚Ä¢ Windows/Mac/Linux: https://www.wireguard.com/install/
   ‚Ä¢ Android: WireGuard –≤ Google Play
   ‚Ä¢ iOS: WireGuard –≤ App Store

2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìÅ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥"
   ‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ .conf —Ñ–∞–π–ª

3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ WireGuard
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å"
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª

4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
   ‚Ä¢ –ì–æ—Ç–æ–≤–æ! üéâ
    """
    
    await callback_query.message.edit_text(
        guide_text,
        reply_markup=create_guide_keyboard()
    )

@dp.callback_query(F.data == "main")
async def handle_main_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'"""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    payment_info = payment_manager.get_payment_info()
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º vpn, —Å–∫–∞—á–∞–π –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ >> https://nikonvpn.xyz

üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {payment_info['period']}:
‚≠ê Telegram Stars: {payment_info['stars_price']} Stars
üí≥ –ö–∞—Ä—Ç–æ–π (–Æmoney): {payment_info['rub_price']} —Ä—É–±.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
    """
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=create_main_menu_keyboard(user_id)
    )

@dp.message(F.text == '/connect')
async def cmd_connect(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if existing_peer:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        if existing_peer.get('payment_status') != 'paid':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø
            payment_info = payment_manager.get_payment_info()
            await message.reply(
                f"‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω!\n\n"
                f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {payment_info['period']}:\n"
                f"‚≠ê Telegram Stars: {payment_info['stars_price']} Stars\n"
                f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: {payment_info['rub_price']} —Ä—É–±.\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            await payment_manager.send_payment_selection(message.chat.id, user_id)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∏—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        peer_exists = wg_api.check_peer_exists(existing_peer['peer_id'])
        
        if peer_exists:
            # –ï—Å–ª–∏ –ø–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                await message.reply("–°–∫–∞—á–∏–≤–∞—é –∫–æ–Ω—Ñ–∏–≥...")
                config_content = wg_api.download_peer_config(existing_peer['peer_id'])
                filename = "nikonVPN.conf"
                
                await bot.send_document(
                    chat_id=message.chat.id,
                    document=types.BufferedInputFile(
                        file=config_content,
                        filename=filename
                    ),
                    caption="üìÅ –¢–≤–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                return
        else:
            # –ü–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            await message.reply("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∏—Ä —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
                peer_result = wg_api.add_peer(existing_peer['peer_name'])
                
                if not peer_result or 'id' not in peer_result:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ä–∞.")
                    return
                
                new_peer_id = peer_result['id']
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π job —Å —Ç–æ–π –∂–µ –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
                job_result, new_job_id, new_expire_date = wg_api.create_restrict_job(new_peer_id, existing_peer['expire_date'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.update_peer_info(existing_peer['peer_name'], new_peer_id, new_job_id, new_expire_date)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config_content = wg_api.download_peer_config(new_peer_id)
                filename = "nikonVPN.conf"
                
                await bot.send_document(
                    chat_id=message.chat.id,
                    document=types.BufferedInputFile(
                        file=config_content,
                        filename=filename
                    ),
                    caption="üìÅ –¢–≤–æ—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
                )
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—Ä–∞: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—Ä–∞.")
                return
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø
    payment_info = payment_manager.get_payment_info()
    await message.reply(
        f"üíé –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø!\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {payment_info['period']}:\n"
        f"‚≠ê Telegram Stars: {payment_info['stars_price']} Stars\n"
        f"üí≥ –ö–∞—Ä—Ç–æ–π (–Æmoney): {payment_info['rub_price']} —Ä—É–±.\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {payment_info['period']}."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await payment_manager.send_payment_selection(message.chat.id, user_id)


@dp.message(F.text == '/extend')
async def cmd_extend(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extend - –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if not existing_peer:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –¥–æ—Å—Ç—É–ø–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π /connect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø
    if existing_peer.get('payment_status') != 'paid':
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π /connect –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return
    
    payment_info = payment_manager.get_payment_info()
    await message.reply(
        f"üíé –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ {payment_info['period']}\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"‚≠ê Telegram Stars: {payment_info['stars_price']} Stars\n"
        f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: {payment_info['rub_price']} —Ä—É–±.\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {payment_info['period']}."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    await payment_manager.send_payment_selection(message.chat.id, user_id)


@dp.message(F.text == '/status')
async def cmd_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_peer = db.get_peer_by_telegram_id(user_id)
    if not existing_peer:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –¥–æ—Å—Ç—É–ø–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π /connect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
    if existing_peer.get('payment_status') != 'paid':
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π /connect –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expire_date_str = existing_peer.get('expire_date')
    if not expire_date_str:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        from datetime import datetime
        expire_date = datetime.strptime(expire_date_str, "%Y-%m-%d %H:%M:%S")
        now = datetime.now()
        
        if expire_date <= now:
            await message.reply("‚ö†Ô∏è –¢–≤–æ–π VPN –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /extend –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        time_left = expire_date - now
        days_left = time_left.days
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds % 3600) // 60
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = f"üìä –°—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–≥–æ VPN –¥–æ—Å—Ç—É–ø–∞:\n\n"
        status_text += f"üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expire_date.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if days_left > 0:
            status_text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω. {hours_left} —á. {minutes_left} –º–∏–Ω."
        elif hours_left > 0:
            status_text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left} —á. {minutes_left} –º–∏–Ω."
        else:
            status_text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {minutes_left} –º–∏–Ω."
        
        if days_left <= 3:
            status_text += "\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ! –ò—Å–ø–æ–ª—å–∑—É–π /extend –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."
        
        await message.reply(status_text)
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ.")


@dp.message(F.text == '/buy')
async def cmd_buy(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await payment_manager.send_payment_selection(message.chat.id, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith('pay_stars_'))
async def handle_pay_stars_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º tariff_key –∏ user_id –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: pay_stars_14_days_123456789)
    callback_parts = callback_query.data.split('_')
    tariff_key = f"{callback_parts[2]}_{callback_parts[3]}"  # 14_days, 30_days –∏–ª–∏ 90_days
    user_id = int(callback_parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - user_id
    username = callback_query.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    await callback_query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars
    success = await payment_manager.send_stars_payment_request(
        callback_query.message.chat.id, user_id, tariff_key, username
    )
    
    if not success:
        tariff_data = payment_manager.tariffs.get(tariff_key, {})
        tariff_name = tariff_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')
        stars_price = tariff_data.get('stars_price', 1)
        await callback_query.message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars.\n\n"
            f"üí° –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å Telegram Stars –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
            f"‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: {stars_price} Stars –∑–∞ {tariff_name} –¥–æ—Å—Ç—É–ø–∞"
        )


@dp.callback_query(F.data.startswith('pay_yookassa_'))
async def handle_pay_yookassa_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º tariff_key –∏ user_id –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: pay_yookassa_14_days_123456789)
    callback_parts = callback_query.data.split('_')
    tariff_key = f"{callback_parts[2]}_{callback_parts[3]}"  # 14_days, 30_days –∏–ª–∏ 90_days
    user_id = int(callback_parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - user_id
    username = callback_query.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ÆKassa
    if not payment_manager.yookassa_client.shop_id or not payment_manager.yookassa_client.secret_key:
        await callback_query.message.reply(
            "‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars.\n\n"
            "üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa
    success = await payment_manager.send_yookassa_payment_request(
        callback_query.message.chat.id, user_id, tariff_key, username
    )
    
    if not success:
        tariff_data = payment_manager.tariffs.get(tariff_key, {})
        tariff_name = tariff_data.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')
        rub_price = tariff_data.get('rub_price', 0)
        await callback_query.message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa.\n\n"
            f"üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars.\n"
            f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {rub_price} —Ä—É–±. –∑–∞ {tariff_name} –¥–æ—Å—Ç—É–ø–∞"
        )


@dp.callback_query(F.data.startswith('pay_yookassa_disabled_'))
async def handle_pay_yookassa_disabled_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ÆKassa"""
    user_id = int(callback_query.data.replace('pay_yookassa_disabled_', ''))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if callback_query.from_user.id != user_id:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    await callback_query.answer()
    
    await callback_query.message.reply(
        "‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars:\n"
        "‚≠ê 1 Stars–∞ –∑–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞\n\n"
        "üîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await payment_manager.process_payment(pre_checkout_query)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    successful_payment = message.successful_payment
    
    # –ü–æ–ª—É—á–∞–µ–º payload –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    payload = successful_payment.invoice_payload
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_confirmed, payment_type, amount_paid = await payment_manager.confirm_payment(successful_payment)
    if not payment_confirmed:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Stars –ø–ª–∞—Ç–µ–∂–∏ (–ÆKassa –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook)
    if not payload.startswith('vpn_access_stars_'):
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ payload
    payload_parts = payload.split('_')
    if len(payload_parts) >= 4:
        tariff_key = f"{payload_parts[3]}_{payload_parts[4]}"  # 14_days, 30_days
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
        return
    
    payment_method = 'stars'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_payment_status(user_id, 'paid', amount_paid, payment_method, tariff_key)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞—Ä–∏—Ñ–∞
    tariff_data = payment_manager.tariffs.get(tariff_key, {})
    access_days = tariff_data.get('days', 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∏—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_peer = db.get_peer_by_telegram_id(user_id)
    
    if existing_peer:
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ä–∞
        success, new_expire_date = db.extend_access(user_id, access_days)
        
        if not success:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º job –≤ WGDashboard
        try:
            job_update_result = wg_api.update_job_expire_date(
                existing_peer['job_id'], 
                existing_peer['peer_id'], 
                new_expire_date
            )
            
            if job_update_result and job_update_result.get('status'):
                logger.info(f"Job –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞: {new_expire_date}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ job –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {job_update_result}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ job –≤ WGDashboard: {e}")
        
        # –ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ
        await message.reply(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
            f"üéâ –ü—Ä–æ–¥–ª–∏–ª–∏ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –Ω–∞ {access_days} –¥–Ω–µ–π!\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ‚≠ê Telegram Stars\n\n"
            f"–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π."
        )
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∏—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.reply("üîÑ –°–æ–∑–¥–∞—é VPN –¥–æ—Å—Ç—É–ø...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–∏—Ä–∞
            peer_name = generate_peer_name(username, user_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∏—Ä–∞
            peer_result = wg_api.add_peer(peer_name)
            
            if not peer_result or 'id' not in peer_result:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
            
            peer_id = peer_result['id']
            
            # –°–æ–∑–¥–∞–µ–º job –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            from datetime import datetime, timedelta
            expire_date = (datetime.now() + timedelta(days=access_days)).strftime('%Y-%m-%d %H:%M:%S')
            job_result, job_id, expire_date = wg_api.create_restrict_job(peer_id, expire_date)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            success = db.add_peer(
                peer_name=peer_name,
                peer_id=peer_id,
                job_id=job_id,
                telegram_user_id=user_id,
                telegram_username=username,
                expire_date=expire_date,
                payment_status='paid',
                stars_paid=amount_paid if payment_method == 'stars' else 0,
                tariff_key=tariff_key,
                payment_method=payment_method,
                rub_paid=amount_paid if payment_method == 'yookassa' else 0
            )
            
            if not success:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_content = wg_api.download_peer_config(peer_id)
            filename = "nikonVPN.conf"
            
            await bot.send_document(
                chat_id=message.chat.id,
                document=types.BufferedInputFile(
                    file=config_content,
                    filename=filename
                ),
                caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ‚≠ê Telegram Stars\nüéâ VPN –¥–æ—Å—Ç—É–ø –Ω–∞ {access_days} –¥–Ω–µ–π!\nüìÅ –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!"
            )
            
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ä–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_unknown(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    existing_peer = db.get_peer_by_telegram_id(user_id)
    has_paid_access = existing_peer and existing_peer.get('payment_status') == 'paid'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/buy - –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø\n/connect - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥",
        reply_markup=create_main_menu_keyboard(user_id)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–∏—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_expired_peers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–∏—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–∏—Ä—ã
            expired_peers = db.get_expired_peers()
            
            for peer in expired_peers:
                try:
                    await bot.send_message(
                        chat_id=peer['telegram_user_id'],
                        text=f"‚ö†Ô∏è –¢–≤–æ–π VPN –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫!\n\n"
                             f"–ò—Å–ø–æ–ª—å–∑—É–π /extend –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ 30 –¥–Ω–µ–π."
                    )
                except TelegramAPIError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {peer['telegram_user_id']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å
            users_for_notification = db.get_users_for_notification(1)
            
            for user in users_for_notification:
                try:
                    payment_info = payment_manager.get_payment_info()
                    tariffs = payment_info['tariffs']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
                    tariff_text = ""
                    for tariff_key, tariff_data in tariffs.items():
                        tariff_text += f"‚≠ê {tariff_data['name']} - {tariff_data['stars_price']} Stars\n"
                        tariff_text += f"üí≥ {tariff_data['name']} - {tariff_data['rub_price']} —Ä—É–±.\n\n"
                    
                    await bot.send_message(
                        chat_id=user['telegram_user_id'],
                        text=f"‚è∞ –¢–≤–æ–π VPN –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!\n\n"
                             f"üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n{tariff_text}"
                             f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    db.mark_notification_sent(user['telegram_user_id'])
                    
                except TelegramAPIError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_user_id']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(30 * 60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–∏—Ä–æ–≤: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–∏—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(check_expired_peers())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ WireGuard –±–æ—Ç–∞...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
