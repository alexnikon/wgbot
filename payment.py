import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.exceptions import TelegramAPIError
from config import TARIFFS, YOOKASSA_PROVIDER_TOKEN

logger = logging.getLogger(__name__)

class PaymentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–ª–∞—Ç–æ–π —á–µ—Ä–µ–∑ Telegram Stars –∏ –ÆKassa"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.tariffs = TARIFFS  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
        self.yookassa_provider_token = YOOKASSA_PROVIDER_TOKEN
    
    async def create_payment_selection_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            InlineKeyboardMarkup —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ÆKassa
        yookassa_available = bool(self.yookassa_provider_token)
        
        buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        for tariff_key, tariff_data in self.tariffs.items():
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars
            buttons.append([InlineKeyboardButton(
                text=f"{tariff_data['name']} - {tariff_data['stars_price']} ‚≠ê",
                callback_data=f"pay_stars_{tariff_key}_{user_id}"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa
            if yookassa_available:
                buttons.append([InlineKeyboardButton(
                    text=f"{tariff_data['name']} - {tariff_data['rub_price']} ‚ÇΩ",
                    callback_data=f"pay_yookassa_{tariff_key}_{user_id}"
                )])
            else:
                buttons.append([InlineKeyboardButton(
                    text=f"{tariff_data['name']} - {tariff_data['rub_price']} ‚ÇΩ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                    callback_data=f"pay_yookassa_disabled_{user_id}"
                )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard
    
    async def create_stars_invoice(self, user_id: int, tariff_key: str, username: str = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            tariff_key: –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ (7_days –∏–ª–∏ 30_days)
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–≤–æ–π—Å–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if tariff_key not in self.tariffs:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tariff_key}")
                return None
                
            tariff_data = self.tariffs[tariff_key]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {tariff_data['stars_price']} –∑–≤–µ–∑–¥",
                    pay=True
                )]
            ])
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
            invoice_data = {
                'title': f'VPN –¥–æ—Å—Ç—É–ø –Ω–∞ {tariff_data["name"]} (Stars)',
                'description': f'{tariff_data["description"]}\n\n'
                              f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}' if username else tariff_data['description'],
                'payload': f'vpn_access_stars_{tariff_key}_{user_id}',
                'provider_token': '',  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
                'currency': 'XTR',  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                'prices': [LabeledPrice(label=f'VPN –¥–æ—Å—Ç—É–ø {tariff_data["name"]}', amount=tariff_data['stars_price'])],
                'reply_markup': keyboard
            }
            
            return invoice_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ Stars –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}: {e}")
            return None
    
    async def create_yookassa_invoice(self, user_id: int, tariff_key: str, username: str = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            tariff_key: –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ (7_days –∏–ª–∏ 30_days)
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–≤–æ–π—Å–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.yookassa_provider_token:
                logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω YooKassa provider token")
                return None
                
            if tariff_key not in self.tariffs:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tariff_key}")
                return None
                
            tariff_data = self.tariffs[tariff_key]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {tariff_data['rub_price']} —Ä—É–±.",
                    pay=True
                )]
            ])
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
            invoice_data = {
                'title': f'VPN –¥–æ—Å—Ç—É–ø –Ω–∞ {tariff_data["name"]} (–ÆKassa)',
                'description': f'{tariff_data["description"]}\n\n'
                              f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}' if username else tariff_data['description'],
                'payload': f'vpn_access_yookassa_{tariff_key}_{user_id}',
                'provider_token': self.yookassa_provider_token,
                'currency': 'RUB',  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä—É–±–ª–µ–π
                'prices': [LabeledPrice(label=f'VPN –¥–æ—Å—Ç—É–ø {tariff_data["name"]}', amount=tariff_data['rub_price'] * 100)],  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                'reply_markup': keyboard
            }
            
            return invoice_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}: {e}")
            return None
    
    async def send_payment_selection(self, chat_id: int, user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            keyboard = await self.create_payment_selection_keyboard(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ÆKassa
            yookassa_available = bool(self.yookassa_provider_token)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
            tariff_text = ""
            for tariff_key, tariff_data in self.tariffs.items():
                tariff_text += f"‚≠ê {tariff_data['name']} - {tariff_data['stars_price']} ‚≠ê\n"
                tariff_text += f"üí≥ {tariff_data['name']} - {tariff_data['rub_price']} —Ä—É–±.\n\n"
            
            payment_text = f"""
‚è∞ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ VPN –¥–æ—Å—Ç—É–ø–∞:

{tariff_text}–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ç–µ–±—è —Ç–∞—Ä–∏—Ñ:
            """
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=payment_text,
                reply_markup=keyboard
            )
            
            logger.info(f"–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_stars_payment_request(self, chat_id: int, user_id: int, tariff_key: str, username: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            tariff_key: –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ (7_days –∏–ª–∏ 30_days)
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            invoice_data = await self.create_stars_invoice(user_id, tariff_key, username)
            if not invoice_data:
                return False
            
            await self.bot.send_invoice(
                chat_id=chat_id,
                **invoice_data
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}")
            return True
            
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Stars: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}: {e}")
            return False
    
    async def send_yookassa_payment_request(self, chat_id: int, user_id: int, tariff_key: str, username: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            tariff_key: –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ (7_days –∏–ª–∏ 30_days)
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            invoice_data = await self.create_yookassa_invoice(user_id, tariff_key, username)
            if not invoice_data:
                return False
            
            await self.bot.send_invoice(
                chat_id=chat_id,
                **invoice_data
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ÆKassa –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}")
            return True
            
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ÆKassa: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ÆKassa –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Ç–∞—Ä–∏—Ñ {tariff_key}: {e}")
            return False
    
    async def process_payment(self, pre_checkout_query) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            pre_checkout_query: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            payload = pre_checkout_query.invoice_payload
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø–ª–∞—Ç–µ–∂
            if not (payload.startswith('vpn_access_stars_') or payload.startswith('vpn_access_yookassa_')):
                await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
            if payload.startswith('vpn_access_stars_'):
                # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Stars - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ payload
                payload_parts = payload.split('_')
                if len(payload_parts) >= 4:
                    tariff_key = f"{payload_parts[3]}_{payload_parts[4]}"
                    tariff_data = self.tariffs.get(tariff_key, {})
                    expected_amount = tariff_data.get('stars_price', 1)
                    if pre_checkout_query.total_amount != expected_amount:
                        await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
                        return False
            elif payload.startswith('vpn_access_yookassa_'):
                # –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏–∑ payload
                payload_parts = payload.split('_')
                if len(payload_parts) >= 4:
                    tariff_key = f"{payload_parts[3]}_{payload_parts[4]}"
                    tariff_data = self.tariffs.get(tariff_key, {})
                    expected_amount = tariff_data.get('rub_price', 0) * 100  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                    if pre_checkout_query.total_amount != expected_amount:
                        await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
                        return False
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            await pre_checkout_query.answer(ok=True)
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return False
    
    async def confirm_payment(self, successful_payment) -> tuple[bool, str, int]:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        
        Args:
            successful_payment: –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Tuple (success, payment_type, amount_paid)
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
            payload = successful_payment.invoice_payload
            
            if payload.startswith('vpn_access_stars_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ payload (—Ñ–æ—Ä–º–∞—Ç: vpn_access_stars_7_days_123456789)
                payload_parts = payload.split('_')
                user_id = int(payload_parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - user_id
                payment_type = 'stars'
                amount_paid = successful_payment.total_amount
                logger.info(f"–ü–ª–∞—Ç–µ–∂ Stars –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–≤–µ–∑–¥: {amount_paid}")
                
            elif payload.startswith('vpn_access_yookassa_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ payload (—Ñ–æ—Ä–º–∞—Ç: vpn_access_yookassa_7_days_123456789)
                payload_parts = payload.split('_')
                user_id = int(payload_parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - user_id
                payment_type = 'yookassa'
                amount_paid = successful_payment.total_amount
                logger.info(f"–ü–ª–∞—Ç–µ–∂ –ÆKassa –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∫–æ–ø–µ–µ–∫: {amount_paid}")
                
            else:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π payload –ø–ª–∞—Ç–µ–∂–∞: {payload}")
                return False, '', 0
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ —Ç.–¥.
            
            return True, payment_type, amount_paid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False, '', 0
    
    def get_payment_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        first_tariff = next(iter(self.tariffs.values())) if self.tariffs else None
        
        return {
            'tariffs': self.tariffs,
            'yookassa_available': bool(self.yookassa_provider_token),
            'period': first_tariff['name'] if first_tariff else '30 –¥–Ω–µ–π',
            'stars_price': first_tariff['stars_price'] if first_tariff else 200,
            'rub_price': first_tariff['rub_price'] if first_tariff else 300
        }
